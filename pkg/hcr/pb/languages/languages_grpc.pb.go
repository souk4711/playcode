// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: languages.proto

package languages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LanguagesClient is the client API for Languages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguagesClient interface {
	Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error)
}

type languagesClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguagesClient(cc grpc.ClientConnInterface) LanguagesClient {
	return &languagesClient{cc}
}

func (c *languagesClient) Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error) {
	out := new(IndexResponse)
	err := c.cc.Invoke(ctx, "/languages.Languages/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguagesServer is the server API for Languages service.
// All implementations must embed UnimplementedLanguagesServer
// for forward compatibility
type LanguagesServer interface {
	Index(context.Context, *IndexRequest) (*IndexResponse, error)
	mustEmbedUnimplementedLanguagesServer()
}

// UnimplementedLanguagesServer must be embedded to have forward compatible implementations.
type UnimplementedLanguagesServer struct {
}

func (UnimplementedLanguagesServer) Index(context.Context, *IndexRequest) (*IndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedLanguagesServer) mustEmbedUnimplementedLanguagesServer() {}

// UnsafeLanguagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguagesServer will
// result in compilation errors.
type UnsafeLanguagesServer interface {
	mustEmbedUnimplementedLanguagesServer()
}

func RegisterLanguagesServer(s grpc.ServiceRegistrar, srv LanguagesServer) {
	s.RegisterService(&Languages_ServiceDesc, srv)
}

func _Languages_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/languages.Languages/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).Index(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Languages_ServiceDesc is the grpc.ServiceDesc for Languages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Languages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "languages.Languages",
	HandlerType: (*LanguagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _Languages_Index_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "languages.proto",
}
